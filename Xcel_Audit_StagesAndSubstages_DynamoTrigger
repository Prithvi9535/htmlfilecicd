var AWS = require('aws-sdk');
var docClient = new AWS.DynamoDB.DocumentClient();

//DYNAMO APIS
const queryDynamo = async params => {
    try {
        let data = await docClient.query(params).promise();
        return data;
    }
    catch (err) {
        console.log(params, err);
    }
};

const deleteFromDynamo = async params => {
    try {
        await docClient.delete(params).promise();
        return 'Success';
    }
    catch (err) {
        console.log(params, err);
    }
};

exports.handler = async(event) => {
    // TODO implement
    for (let i = 0; i < event.Records.length; i++) {
        if (event.Records[i].eventName == 'REMOVE') {
            let single_stage = AWS.DynamoDB.Converter.unmarshall(event.Records[i].dynamodb.OldImage);
            console.log(single_stage);
            if (single_stage.type == "STAGE") {
                if (single_stage.number_of_sub_stages > 0) {
                    let getAllSubStagesOfAStageParams = {
                        TableName: 'XcelAudit_Stages_And_Substages',
                        IndexName: 'audit_library_id__parent_stage_id-type-index',
                        KeyConditionExpression: '#audit_library_id__parent_stage_id = :audit_library_id__parent_stage_id AND #type = :type',
                        ExpressionAttributeNames: {
                            '#audit_library_id__parent_stage_id': 'audit_library_id__parent_stage_id',
                            '#type': 'type',
                        },
                        ExpressionAttributeValues: {
                            ':audit_library_id__parent_stage_id': single_stage.audit_library_id + '__' + single_stage.stage_id,
                            ':type': 'SUB_STAGE',
                        }
                    };
                    let sub_stages = await queryDynamo(getAllSubStagesOfAStageParams);
                    for (let j = 0; j < sub_stages.Items.length; j++) {
                        if (sub_stages.Items[j].number_of_steps > 0) {
                            let getAllStepsOfASubStageParams = {
                                TableName: 'XcelAudit_Library_Steps',
                                IndexName: 'sub_stage_id-index',
                                KeyConditionExpression: '#sub_stage_id = :sub_stage_id',
                                ExpressionAttributeNames: {
                                    '#sub_stage_id': 'sub_stage_id'
                                },
                                ExpressionAttributeValues: {
                                    ':sub_stage_id': sub_stages.Items[j].stage_id
                                }
                            };
                            let steps = await queryDynamo(getAllStepsOfASubStageParams);
                            for (let k = 0; k < steps.Items.length; k++) {
                                let deleteStepParams = {
                                    TableName: 'XcelAudit_Library_Steps',
                                    Key: {
                                        step_id: steps.Items[k].step_id,
                                        sub_stage_id: steps.Items[k].sub_stage_id
                                    }
                                };
                                await deleteFromDynamo(deleteStepParams);
                            }
                        }
                        //Delete Sub Stage
                        let deleteSubStageParams = {
                            TableName: 'XcelAudit_Stages_And_Substages',
                            Key: {
                                stage_id: sub_stages.Items[j].stage_id
                            }
                        };
                        await deleteFromDynamo(deleteSubStageParams);
                    }
                }
            }
            else if (single_stage.type == "SUB_STAGE") {
                if (single_stage.number_of_steps > 0) {
                    let getAllStepsOfASubStageParams = {
                        TableName: 'XcelAudit_Library_Steps',
                        IndexName: 'sub_stage_id-index',
                        KeyConditionExpression: '#sub_stage_id = :sub_stage_id',
                        ExpressionAttributeNames: {
                            '#sub_stage_id': 'sub_stage_id'
                        },
                        ExpressionAttributeValues: {
                            ':sub_stage_id': single_stage.stage_id
                        }
                    };
                    let steps = await queryDynamo(getAllStepsOfASubStageParams);
                    if (steps.Count > 0) {
                        for (let k = 0; k < steps.Items.length; k++) {
                            let deleteStepParams = {
                                TableName: 'XcelAudit_Library_Steps',
                                Key: {
                                    step_id: steps.Items[k].step_id,
                                    sub_stage_id: steps.Items[k].sub_stage_id
                                }
                            };
                            await deleteFromDynamo(deleteStepParams);
                        }
                    }
                }
            }
        }
    }
    return "Great Sucess!!!";
};
