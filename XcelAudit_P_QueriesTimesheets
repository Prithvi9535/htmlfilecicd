//QUERIES , TIMELOGS
// REMOVE listProjectsForClient
//Xcel_Audit_QueryMgmT

var AWS = require('aws-sdk');
AWS.config.update({ region: 'ap-south-1' });
var docClient = new AWS.DynamoDB.DocumentClient();
var lambda = new AWS.Lambda();
var uuid = require('uuid');

function invoke_lambda(payload, function_name, callbackFunction) {
	var params = {
		FunctionName: function_name,
		InvocationType: 'RequestResponse',
		Payload: JSON.stringify(payload),
	};
	lambda.invoke(params, function(err, data) {
		if (err) {
			console.log(err, 'inside invoke_lambda: could not invoke: error stack: ' + err.stack);
		}
		else {
			if (typeof callbackFunction == 'function') callbackFunction(data);
		}
	});
}

function logErrorMsg(errMsg, params, stack, callback, callbackFn) {
	var msg = 'Lambda function name :' + process.env.AWS_LAMBDA_FUNCTION_NAME + '\n\nError message : \n' + JSON.stringify(errMsg) + '\n\nParams : \n' + JSON.stringify(params) + '\n\nStack : \n' + JSON.stringify(stack) + '\n\n Cloudwatch stream :' + process.env.AWS_LAMBDA_LOG_STREAM_NAME;
	invoke_lambda({ message: msg }, 'XcelAudit_B_P_ErrorLogs', function(data) {
		callback(errMsg);
	});
}

function auditLog(logger, message, organisation_id, client_id, project_id, callbackFunction) {
	var params = {
		FunctionName: 'XcelAudit_P_Logs',
		InvocationType: 'RequestResponse',
		Payload: JSON.stringify({ logger: logger, message: message, organisation_id: organisation_id, client_id: client_id, project_id: project_id }),
	};
	lambda.invoke(params, function(err, data) {
		if (err) {
			console.log(err, 'inside invoke_lambda: could not invoke: error stack: ' + err.stack);
		}
		else {
			if (typeof callbackFunction == 'function') callbackFunction(data);
		}
	});
}

function queryDynamo(params, callback, callbackFn) {
	docClient.query(params, function(err, data) {
		if (err) {
			logErrorMsg(err, params, err.stack, callback, function(data) {
				callback(err);
			});
		}
		else {
			if (typeof callbackFn === 'function') {
				callbackFn(data);
			}
		}
	});
}

function insertIntoDynamo(params, callback, callbackFn) {
	docClient.put(params, function(err, data) {
		if (err) {
			logErrorMsg(err, params, err.stack, callback, function(data) {
				callback(err);
			});
		}
		else {
			if (typeof callbackFn === 'function') {
				callbackFn(data);
			}
		}
	});
}

function updateDynamoRecord(params, callback, callbackFn) {
	docClient.update(params, function(err, data) {
		if (err) {
			logErrorMsg(err, params, err.stack, callback, function(data) {
				callback(err);
			});
		}
		else {
			if (typeof callbackFn === 'function') {
				callbackFn(data);
			}
		}
	});
}

function deleteDynamoRecord(params, callback, callbackFn) {
	docClient.delete(params, function(err, data) {
		if (err) {
			logErrorMsg(err, params, err.stack, callback, function(data) {
				callback(err);
			});
		}
		else {
			if (typeof callbackFn === 'function') {
				callbackFn(data);
			}
		}
	});
}

function batchGetDynamo(params, callback, callbackFn) {
	docClient.batchGet(params, (err, data) => {
		if (err) {
			logErrorMsg(err, params, err.stack, callback, function(data) {
				callback(err);
			});
		}
		else {
			if (typeof callbackFn === 'function') {
				callbackFn(data);
			}
		}
	});
}

function createQuery(event, context, callback) {
	let checkEmptyFields = true;
	for (const field in event) {
		if (typeof event[field] == 'string') {
			if (event[field].trim().length == 0) {
				checkEmptyFields = false;
			}
		}
	}
	if (checkEmptyFields) {
		let checkIfProjectExists = {
			TableName: 'XcelAudit_Projects',
			KeyConditionExpression: '#project_id = :project_id',
			ExpressionAttributeNames: { '#project_id': 'project_id' },
			ExpressionAttributeValues: { ':project_id': event.project_id }
		};
		queryDynamo(checkIfProjectExists, callback, function(project) {
			if (project.Count > 0) {
				if (project.Items[0].project_status == 'TO_BE_STARTED' || project.Items[0].project_status == 'IN_PROGRESS') {
					let checkIfQueryRiserExist = {
						TableName: 'XcelAudit_UserPortal_Users',
						KeyConditionExpression: '#user_id = :user_id',
						ExpressionAttributeNames: { '#user_id': 'user_id' },
						FilterExpression: 'user_system_status = :user_system_status AND user_type = :user_type AND contains(projects, :project_id)',
						ExpressionAttributeValues: {
							':user_id': event.riser_user_id,
							':user_system_status': 'ACTIVE',
							':user_type': 'INTERNAL',
							':project_id': event.project_id
						}
					};
					queryDynamo(checkIfQueryRiserExist, callback, function(Users) {
						if (Users.Count > 0) {
							let getStageDetails = {
								TableName: 'XcelAudit_Stages_And_Substages',
								KeyConditionExpression: '#stage_id = :stage_id',
								ExpressionAttributeNames: { '#stage_id': 'stage_id' },
								ExpressionAttributeValues: { ':stage_id': event.stage_id }
							};
							queryDynamo(getStageDetails, callback, function(stage) {
								if (stage.Count > 0) {
									let getSubStageDetails = {
										TableName: 'XcelAudit_Stages_And_Substages',
										KeyConditionExpression: '#stage_id = :stage_id',
										ExpressionAttributeNames: { '#stage_id': 'stage_id' },
										ExpressionAttributeValues: { ':stage_id': event.sub_stage_id }
									};
									queryDynamo(getSubStageDetails, callback, function(sub_stage) {
										if (sub_stage.Count > 0) {
											let getStepDetails = {
												TableName: 'XcelAudit_Library_Steps',
												KeyConditionExpression: '#step_id = :step_id AND #sub_stage_id = :sub_stage_id',
												ExpressionAttributeNames: {
													'#step_id': 'step_id',
													'#sub_stage_id': 'sub_stage_id'
												},
												ExpressionAttributeValues: {
													':step_id': event.step_id,
													':sub_stage_id': event.sub_stage_id
												}
											};
											queryDynamo(getStepDetails, callback, function(step) {
												if (step.Count > 0) {
													let rised_to_promise_array = [];
													for (let i = 0; i < event.rised_to_user_ids.length; i++) {
														rised_to_promise_array.push(
															new Promise((resolve, reject) => {
																let checkIfQueryRisedToExist = {
																	TableName: 'XcelAudit_UserPortal_Users',
																	KeyConditionExpression: '#user_id = :user_id',
																	ExpressionAttributeNames: { '#user_id': 'user_id' },
																	FilterExpression: 'user_system_status = :user_system_status AND contains(projects, :project_id)',
																	ExpressionAttributeValues: {
																		':user_id': event.rised_to_user_ids[i],
																		':user_system_status': 'ACTIVE',
																		':project_id': event.project_id
																	}
																};
																queryDynamo(checkIfQueryRisedToExist, callback, function(risedTo) {
																	if (risedTo.Count > 0) {
																		resolve(risedTo.Items[0].user_name);
																	}
																	else {
																		reject('Active Rised to User with User ID: ' + event.rised_to_user_id[i] + " doesn't Exist");
																	}
																});
															})
														);
													}
													Promise.all(rised_to_promise_array)
														.then(data => {
															let newQueryParams = {
																Item: {
																	case_id: uuid.v4(),
																	case_owner: event.riser_user_id,
																	organisation_id: event.organisation_id,
																	client_id: project.Items[0].client_id,
																	client_name: project.Items[0].client_name,
																	project_id: event.project_id,
																	project_name: project.Items[0].project_name,
																	template_id: project.Items[0].selected_template_id,
																	stage_id: event.stage_id,
																	stage_name: stage.Items[0].stage_name,
																	sub_stage_id: event.sub_stage_id,
																	sub_stage_name: sub_stage.Items[0].stage_name,
																	step_id: event.step_id,
																	step_name: step.Items[0].step_name,
																	riser_user_id: event.riser_user_id,
																	riser_user_name: Users.Items[0].user_name,
																	rised_to_user_ids: event.rised_to_user_ids,
																	rised_to_user_names: data.flat(),
																	initially_rised_to_user_id: event.rised_to_user_id,
																	initially_rised_to_user_name: data.flat(),
																	query_type: event.query_type,
																	project_id__query_type: event.project_id + '__' + event.query_type,
																	amount: event.amount,
																	created_on: new Date().getTime(),
																	subject: event.subject,
																	message_thread: [{
																		created_on: new Date().getTime(),
																		created_by_user_id: event.riser_user_id,
																		created_by_user_name: Users.Items[0].user_name,
																		message: event.message
																	}],
																	latest_message: event.message,
																	query_status: 'PENDING',
																	s3_attachments: event.s3_attachments
																},
																TableName: 'XcelAudit_Queries',
																ConditionExpression: 'attribute_not_exists(case_id)',
																ReturnValues: 'ALL_OLD'
															};
															insertIntoDynamo(newQueryParams, callback, function(InsertedData) {
																let promise_array = [];
																for (let i = 0; i < event.rised_to_user_ids.length; i++) {
																	promise_array.push(
																		new Promise((resolve, reject) => {
																			let updateUserQueriesCountParams = {
																				TableName: 'XcelAudit_UserPortal_Users',
																				Key: {
																					user_id: event.rised_to_user_ids[i]
																				},
																				UpdateExpression: 'add no_of_pending_queries :no_of_pending_queries',
																				ExpressionAttributeValues: {
																					':no_of_pending_queries': 1
																				},
																				ReturnValues: 'UPDATED_NEW'
																			};
																			updateDynamoRecord(updateUserQueriesCountParams, callback, function(data) {
																				let newQueryUserParams = {
																					Item: {
																						case_id: newQueryParams.Item.case_id,
																						case_owner: event.riser_user_id,
																						user_id: event.rised_to_user_ids[i],
																						created_on: newQueryParams.Item.created_on,
																						user_id__created_on: event.rised_to_user_ids[i] + "__" + newQueryParams.Item.created_on
																					},
																					TableName: 'XcelAudit_QueriesUsers',
																					ReturnValues: 'ALL_OLD'
																				};
																				insertIntoDynamo(newQueryUserParams, callback, function(InsertedData) {
																					resolve(InsertedData);
																				});
																			});
																		})
																	);
																}
																Promise.all(promise_array).then(data => {
																	auditLog(Users.Items[0].user_name, 'Created' + event.query_type + 'Query', event.organisation_id, project.Items[0].client_id, event.project_id, function(data) {
																		callback(null, { status: 'Success', Status_Message: event.query_type.charAt(0).toUpperCase() + event.query_type.toLowerCase().slice(1) + ' Query created Successfully!!' });
																	});
																});
															});
														})
														.catch(err => callback(new Error(err)));
												}
												else {
													callback(new Error('Step With ID:' + event.step_id + 'Not Found'));
												}
											});
										}
										else {
											callback(new Error('Sub Stage With ID: ' + event.sub_stage_id + ' Not Found Under Project' + project.Items[0].project_name));
										}
									});
								}
								else {
									callback(new Error('Stage With ID: ' + event.stage_id + ' Not Found Under Project' + project.Items[0].project_name));
								}
							});
						}
						else {
							callback(new Error('INTERNAL User With ID: ' + event.riser_user_id + ' Not Found For This Project'));
						}
					});
				}
				else {
					callback(new Error("Query Can't be created for the current project"));
				}
			}
			else {
				callback(new Error('Project With ID: ' + event.project_id + " Doesn't Exist"));
			}
		});
	}
	else {
		callback(new Error('Empty Fields Occured cannot create Query'));
	}
}

function getQueryDetails(event, context, callback) {
	if (event.case_id.trim().length != 0) {
		let getCaseDetails = {
			TableName: 'XcelAudit_Queries',
			KeyConditionExpression: '#case_id = :case_id',
			ExpressionAttributeNames: { '#case_id': 'case_id' },
			ExpressionAttributeValues: { ':case_id': event.case_id },
		};
		queryDynamo(getCaseDetails, callback, function(Case) {
			if (Case.Count > 0) {
				let response = {};
				response.items = Case.Items[0].message_thread;
				if (Case.LastEvaluatedKey != undefined && Case.LastEvaluatedKey != null) {
					response.next_token = Buffer.from(JSON.stringify(Case.LastEvaluatedKey)).toString('base64');
				}
				callback(null, {
					status: 'SUCCESS',
					data: response,
				});
			}
			else {
				callback(new Error('case with ID: ' + event.case_id + ' not Found!!'));
			}
		});
	}
	else {
		callback(new Error('Kindly Enter Case ID to list Message Thread'));
	}
}

function listOthersQueries(event, context, callback) {
	let checkEmptyFields = true;
	for (const field in event) {
		if (typeof event[field] == 'string') {
			if (event[field].trim().length == 0) {
				checkEmptyFields = false;
			}
		}
	}
	if (checkEmptyFields) {
		let checkIfUserExist = {
			TableName: 'XcelAudit_UserPortal_Users',
			KeyConditionExpression: '#user_id = :user_id',
			ExpressionAttributeNames: { '#user_id': 'user_id' },
			FilterExpression: 'user_system_status = :user_system_status',
			ExpressionAttributeValues: {
				':user_id': event.user_id,
				':user_system_status': 'ACTIVE',
			},
			Limit: 100
		};
		queryDynamo(checkIfUserExist, callback, function(Users) {
			if (Users.Count > 0) {
				let getQueriesForUser = {
					TableName: 'XcelAudit_QueriesUsers',
					IndexName: 'user_id-project_id-index',
					KeyConditionExpression: '#user_id = :user_id',
					ExpressionAttributeNames: { '#user_id': 'user_id' },
					ExpressionAttributeValues: { ':user_id': event.user_id }
				};
				if (event.project_id) {
					getQueriesForUser.KeyConditionExpression += " AND #project_id = :project_id";
					getQueriesForUser.ExpressionAttributeNames['#project_id'] = 'project_id';
					getQueriesForUser.ExpressionAttributeValues[':project_id'] = event.project_id;
				}
				if (event.next_token != null && event.next_token != undefined) {
					getQueriesForUser.ExclusiveStartKey = JSON.parse(Buffer.from(event.next_token, 'base64').toString('ascii'));
				}
				queryDynamo(getQueriesForUser, callback, function(Queries) {
					let queriesToGet25Each = [];
					while (Queries.Items.length) {
						queriesToGet25Each.push(Queries.Items.splice(0, 25));
					}
					let promise_array = [];
					for (let i = 0; i < queriesToGet25Each.length; i++) {
						promise_array.push(
							new Promise((resolve, reject) => {
								let getQueriesParams = {
									RequestItems: {
										XcelAudit_Queries: {
											Keys: []
										}
									}
								};
								for (let j = 0; j < queriesToGet25Each[i].length; j++) {
									getQueriesParams.RequestItems.XcelAudit_Queries.Keys.push({
										case_id: queriesToGet25Each[i][j].case_id
									});
								}
								batchGetDynamo(getQueriesParams, callback, function(data) {
									resolve(data.Responses.XcelAudit_Queries);
								});
							})
						);
					}
					Promise.all(promise_array).then((data) => {
						data = data.flat();
						if (data.length > 0) {
							let response = {
								items: data
							};
							if (Queries.LastEvaluatedKey != undefined && Queries.LastEvaluatedKey != null) {
								response.next_token = Buffer.from(JSON.stringify(Queries.LastEvaluatedKey)).toString('base64');
							}
							callback(null, { status: 'SUCCESS', data: response });
						}
						else {
							callback(new Error("There Are No Queries To List For You"));
						}
					});
				});
			}
			else {
				callback(new Error('No User Found With User ID: ' + event.user_id));
			}
		});
	}
	else {
		callback(new Error("Empty Fields Occured Cannot Show Queries"));
	}
}

function listMyQueries(event, context, callback) {
	let checkEmptyFields = true;
	for (const field in event) {
		if (typeof event[field] == 'string') {
			if (event[field].trim().length == 0) {
				checkEmptyFields = false;
			}
		}
	}
	if (checkEmptyFields) {
		let checkIfUserExist = {
			TableName: 'XcelAudit_UserPortal_Users',
			KeyConditionExpression: '#user_id = :user_id',
			ExpressionAttributeNames: { '#user_id': 'user_id' },
			FilterExpression: 'user_system_status = :user_system_status',
			ExpressionAttributeValues: {
				':user_id': event.user_id,
				':user_system_status': 'ACTIVE',
			},
		};
		queryDynamo(checkIfUserExist, callback, function(Users) {
			if (Users.Count > 0) {
				let getQueriesForUser = {
					TableName: 'XcelAudit_Queries',
					IndexName: 'case_owner-created_on-index',
					KeyConditionExpression: '#case_owner = :case_owner',
					ExpressionAttributeNames: { '#case_owner': 'case_owner' },
					ExpressionAttributeValues: { ':case_owner': event.user_id },
				};
				if (event.next_token != null && event.next_token != undefined) {
					getQueriesForUser.ExclusiveStartKey = JSON.parse(Buffer.from(event.next_token, 'base64').toString('ascii'));
				}
				queryDynamo(getQueriesForUser, callback, function(Queries) {
					if (Queries.Count > 0) {
						let response = {
							items: Queries.Items
						};
						if (Queries.LastEvaluatedKey != undefined && Queries.LastEvaluatedKey != null) {
							response.next_token = Buffer.from(JSON.stringify(Queries.LastEvaluatedKey)).toString('base64');
						}
						callback(null, { status: 'SUCCESS', data: response });
					}
					else {
						callback(new Error("Currently There Are No Queries To List For You"));
					}
				});
			}
			else {
				callback(new Error("ACTIVE User With ID: " + event.user_id + " Not Found"));
			}
		});
	}
	else {
		callback(new Error("Empty Fields Occured Cannot List Queries"));
	}
}

// function listQueries(event, context, callback) {
// 	console.log(event);
// 	if (event.user_id.trim().length != 0) {
// 		let checkIfUserExist = {
// 			TableName: 'XcelAudit_UserPortal_Users',
// 			KeyConditionExpression: '#user_id = :user_id',
// 			ExpressionAttributeNames: { '#user_id': 'user_id' },
// 			FilterExpression: 'user_system_status = :user_system_status',
// 			ExpressionAttributeValues: {
// 				':user_id': event.user_id,
// 				':user_system_status': 'ACTIVE',
// 			},
// 		};
// 		queryDynamo(checkIfUserExist, callback, function(Users) {
// 			if (Users.Count > 0) {
// 				let user_projects = Users.Items[0].projects;
// 				let runner = user_projects.length;
// 				let queries_toShow = [];
// 				if (user_projects.length > 0) {
// 					user_projects.forEach((project_id) => {
// 						let getQueriesForUser = {
// 							TableName: 'XcelAudit_Queries',
// 							IndexName: 'project_id-index',
// 							KeyConditionExpression: '#project_id = :project_id',
// 							ExpressionAttributeNames: { '#project_id': 'project_id' },
// 							ExpressionAttributeValues: { ':project_id': project_id },
// 						};
// 						queryDynamo(getQueriesForUser, callback, function(Queries) {
// 							runner = runner - 1;
// 							if (Queries.Count > 0) {
// 								let project_queries = Queries.Items;
// 								for (let i = 0; i < project_queries.length; i++) {
// 									if (project_queries[i].riser_user_id == event.user_id) {
// 										queries_toShow.push(project_queries[i]);
// 									}
// 									else {
// 										let rised_to_users = project_queries[i].rised_to_user_id;
// 										for (let j = 0; j < rised_to_users.length; j++) {
// 											if (rised_to_users[j] == event.user_id) {
// 												queries_toShow.push(project_queries[i]);
// 											}
// 										}
// 									}
// 								}
// 								if (runner == 0 && queries_toShow.length > 0) {
// 									for (let i = 0; i < queries_toShow.length - 1; i++) {
// 										for (let j = 0; j < queries_toShow.length - 1 - i; j++) {
// 											if (queries_toShow[j].created_on < queries_toShow[j + 1].created_on) {
// 												let temp = queries_toShow[j];
// 												queries_toShow[j] = queries_toShow[j + 1];
// 												queries_toShow[j + 1] = temp;
// 											}
// 										}
// 									}
// 									let response = { items: queries_toShow };
// 									callback(null, { status: 'SUCCESS', data: response });
// 								}
// 								else if (runner == 0) {
// 									callback(new Error('Currently there are no queries for you!!'));
// 								}
// 							}
// 							else if (runner == 0 && queries_toShow.length > 0) {
// 								for (let i = 0; i < queries_toShow.length - 1; i++) {
// 									for (let j = 0; j < queries_toShow.length - 1 - i; j++) {
// 										if (queries_toShow[j].created_on < queries_toShow[j + 1].created_on) {
// 											let temp = queries_toShow[j];
// 											queries_toShow[j] = queries_toShow[j + 1];
// 											queries_toShow[j + 1] = temp;
// 										}
// 									}
// 								}
// 								let response = { items: queries_toShow };
// 								callback(null, { status: 'SUCCESS', data: response });
// 							}
// 							else if (runner == 0) {
// 								callback(new Error('Currently there are no queries for you!!'));
// 							}
// 						});
// 					});
// 				}
// 				else {
// 					callback(new Error('No queries found for you!!!'));
// 				}
// 			}
// 			else {
// 				callback(new Error('No User Found With User ID: ' + event.user_id));
// 			}
// 		});
// 	}
// 	else {
// 		callback(new Error('Kindly Enter User ID to list Queries'));
// 	}
// }

function replyQuery(event, context, callback) {
	let checkEmptyFields = true;
	for (const field in event) {
		if (typeof event[field] == 'string') {
			if (event[field].trim().length == 0) {
				checkEmptyFields = false;
			}
		}
	}
	if (checkEmptyFields) {
		let getQueriesForUser = {
			TableName: 'XcelAudit_Queries',
			KeyConditionExpression: '#case_id = :case_id',
			ExpressionAttributeNames: { '#case_id': 'case_id' },
			ExpressionAttributeValues: { ':case_id': event.case_id },
		};
		queryDynamo(getQueriesForUser, callback, function(Case) {
			if (Case.Count > 0) {
				if (Case.Items[0].query_status == 'PENDING') {
					if (Case.Items[0].riser_user_id == event.user_id || Case.Items[0].rised_to_user_ids.includes(event.user_id)) {
						let getUserDetails = {
							TableName: 'XcelAudit_UserPortal_Users',
							KeyConditionExpression: '#user_id = :user_id',
							ExpressionAttributeNames: { '#user_id': 'user_id' },
							FilterExpression: 'user_system_status = :user_system_status',
							ExpressionAttributeValues: {
								':user_id': event.user_id,
								':user_system_status': 'ACTIVE',
							},
						};
						queryDynamo(getUserDetails, callback, function(Users) {
							if (Users.Count > 0) {
								let message_thread = Case.Items[0].message_thread;
								message_thread.push({
									created_on: new Date().getTime(),
									created_by_user_id: event.user_id,
									created_by_user_name: Users.Items[0].user_name,
									message: event.message,
								});
								let replyQueryParams = {
									TableName: 'XcelAudit_Queries',
									Key: {
										case_id: event.case_id,
									},
									UpdateExpression: 'set message_thread = :message_thread,latest_message=:latest_message',
									ExpressionAttributeValues: {
										':message_thread': message_thread,
										':latest_message': event.message
									},
									ReturnValues: 'UPDATED_NEW',
								};
								if (Case.Items[0].riser_user_id != event.user_id) {
									replyQueryParams.UpdateExpression += ",riser_user_id = :riser_user_id,riser_user_name = :riser_user_name,rised_to_user_ids = :rised_to_user_ids,rised_to_user_names = :rised_to_user_names";
									replyQueryParams.ExpressionAttributeValues[':riser_user_id'] = event.user_id;
									replyQueryParams.ExpressionAttributeValues[':riser_user_name'] = Users.Items[0].user_name;

									Case.Items[0].rised_to_user_ids.splice(Case.Items[0].rised_to_user_ids.indexOf(event.user_id), 1);
									Case.Items[0].rised_to_user_ids.push(Case.Items[0].riser_user_id);
									replyQueryParams.ExpressionAttributeValues[':rised_to_user_ids'] = Case.Items[0].rised_to_user_ids;

									Case.Items[0].rised_to_user_names.splice(Case.Items[0].rised_to_user_names.indexOf(Users.Items[0].user_name), 1);
									Case.Items[0].rised_to_user_names.push(Case.Items[0].riser_user_name);
									replyQueryParams.ExpressionAttributeValues[':rised_to_user_names'] = Case.Items[0].rised_to_user_names;
								}
								updateDynamoRecord(replyQueryParams, callback, function(data) {
									if (event.user_id != Case.Items[0].riser_user_id) {
										let updateUserQueriesCountParams = {
											TableName: 'XcelAudit_UserPortal_Users',
											Key: {
												user_id: event.user_id,
											},
											UpdateExpression: 'ADD no_of_pending_queries :no_of_pending_queries',
											ExpressionAttributeValues: {
												':no_of_pending_queries': -1,
											},
											ReturnValues: 'UPDATED_NEW',
										};
										updateDynamoRecord(updateUserQueriesCountParams, callback, function(data) {
											let updateUserQueriesCountParams = {
												TableName: 'XcelAudit_UserPortal_Users',
												Key: {
													user_id: Case.Items[0].riser_user_id,
												},
												UpdateExpression: 'ADD no_of_pending_queries :no_of_pending_queries',
												ExpressionAttributeValues: {
													':no_of_pending_queries': 1,
												},
												ReturnValues: 'UPDATED_NEW',
											};
											updateDynamoRecord(updateUserQueriesCountParams, callback, function(data) {
												auditLog(event.creater_email_id.trim(), 'Replied to Query with Case ID - ' + event.case_id, event.organisation_id, Case.Items[0].client_id, event.project_id, function(value) {
													callback(null, { status: 'Success', Status_Message: '  Replied Successfully!!' });
												});
												// let deleteUserFromQuery = {
												// 	TableName: 'XcelAudit_QueriesUsers',
												// 	Key: {
												// 		case_id: Case.Items[0].case_id,
												// 		user_id: event.user_id
												// 	}
												// };
												// deleteDynamoRecord(deleteUserFromQuery, callback, function(data) {
												// 	let newQueryUserParams = {
												// 		Item: {
												// 			case_id: Case.Items[0].case_id,
												// 			case_owner: Case.Items[0].case_owner,
												// 			user_id: Case.Items[0].riser_user_id,
												// 			created_on: new Date().getTime()
												// 		},
												// 		TableName: 'XcelAudit_QueriesUsers',
												// 		ReturnValues: 'ALL_OLD'
												// 	};
												// 	insertIntoDynamo(newQueryUserParams, callback, function(InsertedData) {

												// 	});
												// });
											});
										});

									}
									else {
										auditLog(event.creater_email_id.trim(), 'Replied to Query with Case ID - ' + event.case_id, event.organisation_id, Case.Items[0].client_id, event.project_id, function(value) {
											callback(null, { status: 'Success', Status_Message: '  Replied Successfully!!' });
										});
									}
								});
							}
							else {
								callback(new Error('ACTIVE User Not Found With User ID: ' + event.user_id));
							}
						});
					}
					else {
						callback(new Error('User With ID: ' + event.user_id + ' Cannot reply to this query!!'));
					}
				}
				else {
					callback(new Error('Cannot Reply To Closed Query'));
				}
			}
			else {
				callback(new Error('Query with Case ID: ' + event.case_id + ' not Found!!'));
			}
		});
	}
	else {
		callback(new Error('Empty Fields Occured Cannot create Enternal Query!!'));
	}
}

function closeQuery(event, context, callback) {
	let checkEmptyFields = true;
	for (const field in event) {
		if (typeof event[field] == 'string') {
			if (event[field].trim().length == 0) {
				checkEmptyFields = false;
			}
		}
	}
	if (checkEmptyFields) {
		let getQueriesForUser = {
			TableName: 'XcelAudit_Queries',
			KeyConditionExpression: '#case_id = :case_id',
			ExpressionAttributeNames: { '#case_id': 'case_id' },
			ExpressionAttributeValues: { ':case_id': event.case_id },
		};
		queryDynamo(getQueriesForUser, callback, function(Case) {
			if (Case.Count > 0) {
				if (event.user_id == Case.Items[0].case_owner) {
					let closeQueryParams = {
						TableName: 'XcelAudit_Queries',
						Key: {
							case_id: event.case_id,
						},
						UpdateExpression: 'set query_status = :query_status',
						ExpressionAttributeValues: { ':query_status': 'RESOLVED' },
						ReturnValues: 'UPDATED_NEW',
					};
					updateDynamoRecord(closeQueryParams, callback, function(data) {
						let promise_array = Case.Items[0].rised_to_user_ids.map(user_id => {
							return new Promise((resolve, reject) => {
								let updateUserQueriesCountParams = {
									TableName: 'XcelAudit_UserPortal_Users',
									Key: {
										user_id: user_id,
									},
									UpdateExpression: 'add no_of_pending_queries :no_of_pending_queries',
									ExpressionAttributeValues: {
										':no_of_pending_queries': -1,
									},
									ReturnValues: 'UPDATED_NEW',
								};
								updateDynamoRecord(updateUserQueriesCountParams, callback, function(data) {
									let deleteQueryUserParams = {
										TableName: 'XcelAudit_QueriesUsers',
										Key: {
											case_id: Case.Items[0].case_id,
											user_id: user_id
										}
									};
									deleteDynamoRecord(deleteQueryUserParams, callback, function(data) {
										resolve(data);
									});
								});
							});
						});
						Promise.all(promise_array).then((data) => {
							auditLog(event.creater_email_id.trim(), 'Case with ID - ' + event.case_id + ' has been resolved!!', event.organisation_id, Case.Items[0].client_id, Case.Items[0].project_id, function(value) {
								callback(null, { status: 'Success', Status_Message: '  Resolved Case Successfully!!' });
							});
						}).catch(err => {
							callback(new Error(err));
						});
					});
				}
				else {
					callback(new Error('Query cannot be closed by user with ID: ' + event.user_id));
				}
			}
			else {
				callback(new Error('Query with Case ID: ' + event.case_id + ' not Found!!'));
			}
		});
	}
	else {
		callback(new Error('Empty Fields Occured Cannot close Query!!'));
	}
}

function AddTimeLog(event, context, callback) {
	let checkEmptyFields = true;
	for (const field in event) {
		if (typeof event[field] == 'string') {
			if (event[field].trim().length == 0) {
				checkEmptyFields = false;
			}
		}
	}
	if (checkEmptyFields) {
		let getProject = {
			TableName: 'XcelAudit_Projects',
			KeyConditionExpression: '#project_id = :project_id',
			ExpressionAttributeNames: { '#project_id': 'project_id' },
			ExpressionAttributeValues: { ':project_id': event.project_id },
		};
		queryDynamo(getProject, callback, function(project) {
			if (project.Count > 0) {
				if (project.Items[0].project_status != 'ARCHIVED') {
					if (project.Items[0].organisation_id == event.organisation_id) {
						let project_members = project.Items[0].project_members;
						let user_found = false;
						project_members.forEach((member) => {
							if (member.user_id == event.user_id) {
								user_found = true;
							}
						});
						if (user_found) {
							let getStageDetails = {
								TableName: 'XcelAudit_Stages_And_Substages',
								KeyConditionExpression: '#stage_id = :stage_id',
								ExpressionAttributeNames: { '#stage_id': 'stage_id' },
								ExpressionAttributeValues: { ':stage_id': event.stage_id },
							};
							queryDynamo(getStageDetails, callback, function(stage) {
								if (stage.Count > 0) {
									let getSubStageDetails = {
										TableName: 'XcelAudit_Stages_And_Substages',
										KeyConditionExpression: '#stage_id = :stage_id',
										ExpressionAttributeNames: { '#stage_id': 'stage_id' },
										ExpressionAttributeValues: { ':stage_id': event.sub_stage_id },
									};
									queryDynamo(getSubStageDetails, callback, function(sub_stage) {
										if (sub_stage.Count > 0) {
											let newTimeLogParams = {
												Item: {
													time_sheet_id: uuid.v4(),
													organisation_id: event.organisation_id,
													client_id: project.Items[0].client_id,
													client_name: project.Items[0].client_name,
													project_id: event.project_id,
													project_id__status: event.project_id + "__" + "PENDING",
													project_name: project.Items[0].project_name,
													template_id: project.Items[0].selected_template_id,
													stage_id: event.stage_id,
													stage_name: stage.Items[0].stage_name,
													sub_stage_id: event.sub_stage_id,
													sub_stage_name: sub_stage.Items[0].stage_name,
													user_id: event.user_id,
													selected_date: event.selected_date,
													number_of_hours: event.number_of_hours,
													created_on: new Date().getTime(),
													status: 'PENDING',
												},
												TableName: 'XcelAudit_Timesheets',
												ConditionExpression: 'attribute_not_exists(time_sheet_id)',
												ReturnValues: 'ALL_OLD',
											};
											insertIntoDynamo(newTimeLogParams, callback, function(InsertedData) {
												auditLog(event.creater_email_id, 'Time Log Added SuccessFully  ', event.organisation_id, event.client_id, event.project_id, function(data) {
													callback(null, { status: 'Success', Status_Message: 'Log Added Successfully!!' });
												});
											});
										}
										else {
											callback(new Error('Sub Stage With ID: ' + event.sub_stage_id + ' Not Found'));
										}
									});
								}
								else {
									callback(new Error('Stage With ID: ' + event.stage_id + ' not found'));
								}
							});
						}
						else {
							callback(new Error('User With ID: ' + event.user_id + ' is not a part of project with ID: ' + event.project_id));
						}
					}
					else {
						callback(new Error('Project doesnot belong to organisation with ID: ' + event.organisation_id));
					}

				}
				else {
					callback(new Error('Project is Already Archived'));
				}
			}
			else {
				callback(new Error('Project Not Found with ID: ' + event.project_id));
			}
		});
	}
	else {
		callback(new Error('Empty Fields Occured Cannot close Query!!'));
	}
}

function ListTimeLog(event, context, callback) {
	if (event.user_id.trim().length != 0) {
		let getLogsDetails = {
			TableName: 'XcelAudit_Timesheets',
			IndexName: 'user_id-index',
			KeyConditionExpression: '#user_id = :user_id',
			ExpressionAttributeNames: { '#user_id': 'user_id' },
			ExpressionAttributeValues: { ':user_id': event.user_id },
		};
		queryDynamo(getLogsDetails, callback, function(Logs) {
			if (Logs.Count > 0) {
				let response = {};
				response.items = Logs.Items;
				if (Logs.LastEvaluatedKey != undefined && Logs.LastEvaluatedKey != null) {
					response.next_token = Buffer.from(JSON.stringify(Logs.LastEvaluatedKey)).toString('base64');
				}
				callback(null, {
					status: 'SUCCESS',
					data: response
				});
			}
			else {
				callback(new Error('No Time Log Found For You'));
			}
		});
	}
	else {
		callback(new Error('Kindly Enter User ID to list Audit Logs'));
	}
}

function listProjectsOfTSRForTimeSheets(event, context, callback) {
	if (event.user_id.trim().length > 0) {
		let getProjectsParams = {
			TableName: 'XcelAudit_Projects',
			IndexName: 'TSR_id-index',
			KeyConditionExpression: '#TSR_id = :TSR_id',
			ExpressionAttributeNames: { '#TSR_id': 'TSR_id' },
			ExpressionAttributeValues: { ':TSR_id': event.user_id },
		};
		queryDynamo(getProjectsParams, callback, function(projects) {
			if (projects.Count > 0) {
				let response = {};
				response.items = projects.Items;
				callback(null, { status: 'SUCCESS', data: response });
			}
			else {
				callback(new Error("There Are No Projects To List For You As TSR"));
			}
		});
	}
	else {
		callback(new Error("Kindly,Enter Valid User ID To List Projects"));
	}
}

function listTimeLogsToBeReviewedForProject(event, context, callback) {
	let checkEmptyFields = true;
	for (const field in event) {
		if (typeof event[field] == 'string') {
			if (event[field].trim().length == 0) {
				checkEmptyFields = false;
			}
		}
	}
	if (checkEmptyFields) {
		let getTimeSheets = {
			TableName: 'XcelAudit_Timesheets',
			IndexName: 'project_id__status-created_on-index',
			KeyConditionExpression: '#project_id__status = :project_id__status',
			ExpressionAttributeNames: {
				'#project_id__status': 'project_id__status'
			},
			ExpressionAttributeValues: {
				':project_id__status': event.project_id + "__PENDING"
			},
			ScanIndexForward: false
		};
		if (event.next_token != null && event.next_token != undefined) {
			getTimeSheets.ExclusiveStartKey = JSON.parse(Buffer.from(event.next_token, 'base64').toString('ascii'));
		}
		queryDynamo(getTimeSheets, callback, function(timeSheets) {
			if (timeSheets.Count > 0) {
				let response = {};
				if (timeSheets.LastEvaluatedKey != undefined && timeSheets.LastEvaluatedKey != null) {
					response.next_token = Buffer.from(JSON.stringify(timeSheets.LastEvaluatedKey)).toString('base64');
				}
				response.items = timeSheets.Items;
				callback(null, { status: 'SUCCESS', data: response });
			}
			else {
				callback(new Error("There Are No Time Sheets To Be Reviewed Right Now"));
			}
		});
	}
	else {
		callback(new Error("Empty Fields Occured Cannot List Time Logs"));
	}
}

function listTimeLogsToBeReviewed(event, context, callback) {
	let total_projectsToFetch = event.project_list.length;
	if (total_projectsToFetch != 0) {
		let response = {};
		let time_sheets_to_show = [];
		event.project_list.forEach((project_id) => {
			let getTimeSheets = {
				TableName: 'XcelAudit_Timesheets',
				IndexName: 'project_id-index',
				KeyConditionExpression: '#project_id = :project_id',
				ExpressionAttributeNames: { '#project_id': 'project_id' },
				ExpressionAttributeValues: { ':project_id': project_id },
			};
			queryDynamo(getTimeSheets, callback, function(timeSheets) {
				if (timeSheets.Count > 0) {
					let getProjectDetails = {
						TableName: 'XcelAudit_Projects',
						KeyConditionExpression: '#project_id = :project_id',
						ExpressionAttributeNames: { '#project_id': 'project_id' },
						ExpressionAttributeValues: { ':project_id': project_id },
					};
					queryDynamo(getProjectDetails, callback, function(project) {
						total_projectsToFetch = total_projectsToFetch - 1;
						if (project.Count > 0) {
							if (timeSheets.LastEvaluatedKey != undefined && timeSheets.LastEvaluatedKey != null) {
								response.next_token = Buffer.from(JSON.stringify(timeSheets.LastEvaluatedKey)).toString('base64');
							}
							if (project.Items[0].TSR_id == event.user_id) {
								for (let z = 0; z < timeSheets.Items.length; z++) {
									time_sheets_to_show.push(timeSheets.Items[z]);
								}
							}

							if (total_projectsToFetch == 0) {
								for (let i = 0; i < time_sheets_to_show.length - 1; i++) {
									for (let j = 0; j < time_sheets_to_show.length - 1 - i; j++) {
										if (time_sheets_to_show[j].created_at < time_sheets_to_show[j + 1].created_at) {
											let temp = time_sheets_to_show[j];
											time_sheets_to_show[j] = time_sheets_to_show[j + 1];
											time_sheets_to_show[j + 1] = temp;
										}
									}
								}
								if (time_sheets_to_show.length == 0) {
									callback(new Error('There are No TimeSheets to be reviewed by you!!'));
								}
								response.items = time_sheets_to_show;
								callback(null, { status: 'SUCCESS', data: response });
							}
						}
					});
				}
				else {
					total_projectsToFetch = total_projectsToFetch - 1;
					if (total_projectsToFetch == 0) {
						for (let i = 0; i < time_sheets_to_show.length - 1; i++) {
							for (let j = 0; j < time_sheets_to_show.length - 1 - i; j++) {
								if (time_sheets_to_show[j].created_at < time_sheets_to_show[j + 1].created_at) {
									let temp = time_sheets_to_show[j];
									time_sheets_to_show[j] = time_sheets_to_show[j + 1];
									time_sheets_to_show[j + 1] = temp;
								}
							}
						}
						if (time_sheets_to_show.length == 0) {
							callback(new Error('There are No TimeSheets to be reviewed by you!!'));
						}
						response.items = time_sheets_to_show;
						callback(null, { status: 'SUCCESS', data: response });
					}
				}
			});
		});
	}
	else {
		callback(new Error('There are No TimeSheets to be reviewed by you!!'));
	}
}

function editTimeLog(event, context, callback) {
	let checkEmptyFields = true;
	for (const field in event) {
		if (typeof event[field] == 'string') {
			if (event[field].trim().length == 0) {
				checkEmptyFields = false;
			}
		}
	}
	if (checkEmptyFields) {
		let getTimeSheetDetails = {
			TableName: 'XcelAudit_Timesheets',
			KeyConditionExpression: '#time_sheet_id = :time_sheet_id',
			ExpressionAttributeNames: { '#time_sheet_id': 'time_sheet_id' },
			ExpressionAttributeValues: { ':time_sheet_id': event.time_sheet_id },
		};
		queryDynamo(getTimeSheetDetails, callback, function(timeSheet) {
			if (timeSheet.Items[0].status == 'PENDING') {
				let UpdateExpression = 'set';
				let ExpressionAttributeNames = {};
				let ExpressionAttributeValues = {};
				for (const field in event) {
					if (field == 'time_sheet_id' || field == 'command' || field == 'user_id' || field == 'created_on') {
						continue;
					}
					else {
						UpdateExpression += ` #${field} = :${field} ,`;
						ExpressionAttributeNames['#' + field] = field;
						ExpressionAttributeValues[':' + field] = event[field];
					}
				}
				if (UpdateExpression != 'set') {
					UpdateExpression = UpdateExpression.slice(0, -1);
					let updateTimeSheetDetails = {
						TableName: 'XcelAudit_Timesheets',
						Key: {
							time_sheet_id: event.time_sheet_id,
						},
						UpdateExpression: UpdateExpression,
						ExpressionAttributeNames: ExpressionAttributeNames,
						ExpressionAttributeValues: ExpressionAttributeValues,
						ReturnValues: 'UPDATED_NEW',
					};
					updateDynamoRecord(updateTimeSheetDetails, callback, function(data) {
						auditLog(event.creater_email_id.trim(), 'Updated TimeSheet - ' + timeSheet.Items[0].time_sheet_id, event.organisation_id, timeSheet.Items[0].client_id, timeSheet.Items[0].project_id, function(value) {
							callback(null, { status: 'Success', Status_Message: ' updated timesheet Successfully!!' });
						});
					});
				}
				else {
					callback(new Error('Client Cannot be updated !!!'));
				}
			}
			else {
				callback(new Error('Time Sheet cannot be updated'));
			}
		});
	}
	else {
		callback(new Error('Empty Fields Occured Cannot Update Time Sheet'));
	}
}

function reviewTimeLog(event, context, callback) {
	let checkEmptyFields = true;
	for (const field in event) {
		if (typeof event[field] == 'string') {
			if (event[field].trim().length == 0) {
				checkEmptyFields = false;
			}
		}
	}
	if (checkEmptyFields) {
		let getProjectDetails = {
			TableName: 'XcelAudit_Projects',
			KeyConditionExpression: '#project_id = :project_id',
			ExpressionAttributeNames: { '#project_id': 'project_id' },
			ExpressionAttributeValues: { ':project_id': event.project_id },
		};
		queryDynamo(getProjectDetails, callback, function(project) {
			let getTimeSheetParams = {
				TableName: 'XcelAudit_Timesheets',
				KeyConditionExpression: '#time_sheet_id = :time_sheet_id',
				ExpressionAttributeNames: { '#time_sheet_id': 'time_sheet_id' },
				ExpressionAttributeValues: { ':time_sheet_id': event.time_sheet_id },
			};
			queryDynamo(getTimeSheetParams, callback, function(timesheet) {
				if (project.Count > 0) {
					if (project.Items[0].TSR_id == event.reviewer_id) {
						if (timesheet.Items[0].status == 'PENDING' && (event.timesheet_status == 'APPROVED' || event.timesheet_status == 'REJECTED')) {
							let reviewTimeSheetParams = {
								TableName: 'XcelAudit_Timesheets',
								Key: {
									time_sheet_id: event.time_sheet_id,
								},
								UpdateExpression: 'set #status = :status, #project_id__status = :project_id__status',
								ExpressionAttributeNames: {
									'#status': 'status',
									'#project_id__status': 'project_id__status'
								},
								ExpressionAttributeValues: {
									':status': event.timesheet_status,
									':project_id__status': project.Items[0].project_id + "__" + event.timesheet_status
								},
								ReturnValues: 'UPDATED_NEW',
							};
							if (event.reviewer_comment && event.reviewer_comment != "") {
								reviewTimeSheetParams.UpdateExpression += ',reviewer_comment = :reviewer_comment';
								reviewTimeSheetParams.ExpressionAttributeValues[':reviewer_comment'] = event.reviewer_comment.trim();
							}
							updateDynamoRecord(reviewTimeSheetParams, callback, function(data) {
								auditLog(event.user_email_id.trim(), 'Time Sheet with ID - ' + event.time_sheet_id + ' has been ' + event.timesheet_status + '!!', event.organisation_id, timesheet.Items[0].client_id, timesheet.Items[0].project_id, function(value) {
									callback(null, { status: 'Success', Status_Message: 'Reviewed timesheet Successfully!!' });
								});
							});
						}
						else {
							callback(new Error("TimeSheet status can't be changed"));
						}
					}
					else {
						callback(new Error('You dont have permission to eview the time sheet'));
					}
				}
				else {
					callback(new Error('Timesheet not found with ID: ' + event.time_sheet_id));
				}
			});
		});
	}
	else {
		callback(new Error('Empty field occured cannot reviewTimeSheet'));
	}
}

exports.handler = (event, context, callback) => {
	console.log(JSON.stringify(event));
	switch (event.command) {
		case 'createQuery':
			createQuery(event, context, callback);
			break;
			// case 'listQueries':
			// 	listQueries(event, context, callback);
			// 	break;
		case 'getQueryDetails':
			getQueryDetails(event, context, callback);
			break;
		case 'replyQuery':
			replyQuery(event, context, callback);
			break;
		case 'closeQuery':
			closeQuery(event, context, callback);
			break;
		case 'AddTimeLog':
			AddTimeLog(event, context, callback);
			break;
		case 'ListTimeLog':
			ListTimeLog(event, context, callback);
			break;
		case 'editTimeLog':
			editTimeLog(event, context, callback);
			break;
		case 'listProjectsOfTSRForTimeSheets':
			listProjectsOfTSRForTimeSheets(event, context, callback);
			break;
		case 'listTimeLogsToBeReviewedForProject':
			listTimeLogsToBeReviewedForProject(event, context, callback);
			break;
		case 'listTimeLogsToBeReviewed':
			listTimeLogsToBeReviewed(event, context, callback);
			break;
		case 'reviewTimeLog':
			reviewTimeLog(event, context, callback);
			break;
		case 'listOthersQueries':
			listOthersQueries(event, context, callback);
			break;
		case 'listMyQueries':
			listMyQueries(event, context, callback);
			break;
		default:
			callback(new Error('Command not found'));
	}
};

// function createQuery(event, context, callback) {
//     let checkEmptyFields = true;
//     for (const field in event) {
//         if (typeof(event[field]) == 'string') {
//             if (event[field].trim().length == 0) {
//                 checkEmptyFields = false;
//             }
//         }
//     }
//     if (checkEmptyFields) {
//         let checkIfProjectExists = {
//             TableName: "XcelAudit_Projects",
//             KeyConditionExpression: '#project_id = :project_id',
//             ExpressionAttributeNames: { '#project_id': "project_id" },
//             ExpressionAttributeValues: { ':project_id': event.project_id }
//         };
//         queryDynamo(checkIfProjectExists, callback, function(project) {
//             if (project.Count > 0) {
//                 if (project.Items[0].project_status == "TO_BE_STARTED" || project.Items[0].project_status == "IN_PROGRESS") {
//                     let checkIfQueryRiserExist = {
//                         TableName: "XcelAudit_UserPortal_Users",
//                         KeyConditionExpression: '#user_id = :user_id',
//                         ExpressionAttributeNames: { '#user_id': "user_id" },
//                         FilterExpression: "user_system_status = :user_system_status AND user_type = :user_type",
//                         ExpressionAttributeValues: {
//                             ':user_id': event.riser_user_id,
//                             ':user_system_status': "ACTIVE",
//                             ':user_type': "INTERNAL"
//                         }
//                     };
//                     queryDynamo(checkIfQueryRiserExist, callback, function(Users) {
//                         if (Users.Count > 0) {
//                             let user_projects = Users.Items[0].projects;
//                             let project_found = false;
//                             user_projects.forEach(project_id => {
//                                 if (project_id == event.project_id) {
//                                     project_found = true;
//                                     let project_stages = project.Items[0].selected_template.audit_library_stages;
//                                     let stage_not_found = true;
//                                     let sub_stage_not_found = true;
//                                     let step_not_found = true;
//                                     for (let key in project_stages) {
//                                         let singleStage = project.Items[0].selected_template.audit_library_stages[key];
//                                         if (singleStage.stage_id == event.stage_id) {
//                                             stage_not_found = false;
//                                             for (let element in singleStage.sub_stages) {
//                                                 let singleSubStage = singleStage.sub_stages[element];
//                                                 if (singleSubStage.sub_stage_id == event.sub_stage_id) {
//                                                     sub_stage_not_found = false;
//                                                     for (let parameter in singleSubStage.steps) {
//                                                         let singleStep = singleSubStage.steps[parameter];
//                                                         if (singleStep.step_id == event.step_id) {
//                                                             step_not_found = false;
//                                                             let all_rised_to_exist = true;
//                                                             let project_found_for_all = true;
//                                                             let runner = event.rised_to_user_id.length;
//                                                             let pendingQueries = [];
//                                                             let rised_to_user_names = [];
//                                                             for (let i = 0; i < event.rised_to_user_id.length; i++) {
//                                                                 let checkIfQueryRiseToExist = {
//                                                                     TableName: "XcelAudit_UserPortal_Users",
//                                                                     KeyConditionExpression: '#user_id = :user_id',
//                                                                     ExpressionAttributeNames: { '#user_id': "user_id" },
//                                                                     FilterExpression: "user_system_status = :user_system_status ",
//                                                                     ExpressionAttributeValues: {
//                                                                         ':user_id': event.rised_to_user_id[i],
//                                                                         ':user_system_status': "ACTIVE"
//                                                                     }
//                                                                 };
//                                                                 queryDynamo(checkIfQueryRiseToExist, callback, function(risedTo) {
//                                                                     runner = runner - 1;
//                                                                     if (risedTo.Count > 0) {
//                                                                         let risedTo_projects = risedTo.Items[0].projects;
//                                                                         let project_found = false;
//                                                                         risedTo_projects.forEach(project_id => {
//                                                                             if (project_id == event.project_id) {
//                                                                                 project_found = true;
//                                                                                 pendingQueries.push(risedTo.Items[0].no_of_pending_queries);
//                                                                                 rised_to_user_names.push(risedTo.Items[0].user_name);
//                                                                             }
//                                                                         });
//                                                                         if (!project_found) {
//                                                                             project_found_for_all = false;
//                                                                             callback(new Error("Query Cannot be rised to " + risedTo.Items[0].user_name + " on project " + project.Items[0].project_name));
//                                                                         }
//                                                                         if (runner == 0 && (project_found_for_all && all_rised_to_exist)) {
//                                                                             let currentTime = new Date();
//                                                                             let created_at = new Date(currentTime.getTime());
//                                                                             let timeStamp = created_at.getTime();
//                                                                             let message_thread = [];
//                                                                             let reply_message_thread = {
//                                                                                 created_on: timeStamp,
//                                                                                 created_by_user_id: event.riser_user_id,
//                                                                                 created_by_user_name: Users.Items[0].user_name,
//                                                                                 message: event.message
//                                                                             };
//                                                                             message_thread.push(reply_message_thread);
//                                                                             let newQueryParams = {
//                                                                                 Item: {
//                                                                                     "case_id": uuid.v4(),
//                                                                                     "case_owner": event.riser_user_id,
//                                                                                     "organisation_id": event.organisation_id,
//                                                                                     "client_id": project.Items[0].client_id,
//                                                                                     "client_name": project.Items[0].client_name,
//                                                                                     "project_id": event.project_id,
//                                                                                     "project_name": project.Items[0].project_name,
//                                                                                     "template_id": project.Items[0].selected_template.selected_template_id,
//                                                                                     "stage_id": event.stage_id,
//                                                                                     "stage_name": singleStage.stage_name,
//                                                                                     "sub_stage_id": event.sub_stage_id,
//                                                                                     "sub_stage_name": singleSubStage.sub_stage_name,
//                                                                                     "step_id": event.step_id,
//                                                                                     "step_name": singleStep.step_name,
//                                                                                     "riser_user_id": event.riser_user_id,
//                                                                                     "riser_user_name": Users.Items[0].user_name,
//                                                                                     "rised_to_user_id": event.rised_to_user_id,
//                                                                                     "rised_to_user_name": rised_to_user_names,
//                                                                                     "initially_rised_to_user_id": event.rised_to_user_id,
//                                                                                     "initially_rised_to_user_name": rised_to_user_names,
//                                                                                     "query_type": event.query_type,
//                                                                                     "amount": event.amount,
//                                                                                     "created_on": timeStamp,
//                                                                                     "subject": event.subject,
//                                                                                     "message_thread": message_thread,
//                                                                                     "latest_message": event.message,
//                                                                                     "query_status": 'PENDING'
//                                                                                 },
//                                                                                 TableName: "XcelAudit_Queries",
//                                                                                 ConditionExpression: "attribute_not_exists(case_id)",
//                                                                                 ReturnValues: "ALL_OLD"
//                                                                             };
//                                                                             insertIntoDynamo(newQueryParams, callback, function(InsertedData) {
//                                                                                 let number_of_users = event.rised_to_user_id.length;
//                                                                                 for (let i = 0; i < event.rised_to_user_id.length; i++) {
//                                                                                     let updateUserQueriesCountParams = {
//                                                                                         TableName: "XcelAudit_UserPortal_Users",
//                                                                                         Key: {
//                                                                                             user_id: event.rised_to_user_id[i]
//                                                                                         },
//                                                                                         UpdateExpression: "set no_of_pending_queries = :no_of_pending_queries",
//                                                                                         ExpressionAttributeValues: {
//                                                                                             ':no_of_pending_queries': pendingQueries[i] + 1
//                                                                                         },
//                                                                                         ReturnValues: "UPDATED_NEW"
//                                                                                     };
//                                                                                     updateDynamoRecord(updateUserQueriesCountParams, callback, function(data) {
//                                                                                         number_of_users = number_of_users - 1;
//                                                                                         if (number_of_users == 0) {
//                                                                                             auditLog(Users.Items[0].user_name, "Created" + event.query_type + "Query", event.organisation_id, function(data) {
//                                                                                                 callback(null, { "status": "Success", "Status_Message": event.query_type.charAt(0).toUpperCase() + event.query_type.toLowerCase().slice(1) + " Query created Successfully!!" });
//                                                                                             });
//                                                                                         }
//                                                                                     });
//                                                                                 }
//                                                                             });
//                                                                         }
//                                                                     }
//                                                                     else {
//                                                                         all_rised_to_exist = false;
//                                                                         callback(new Error("Active Rised to User with User ID: " + event.rised_to_user_id + " doesn't Exist"));
//                                                                     }
//                                                                 });
//                                                             }
//                                                         }
//                                                     }
//                                                 }
//                                             }
//                                         }
//                                     }
//                                     if (stage_not_found) {
//                                         callback(new Error("Template Doesn't have Stage with ID: " + event.stage_id));
//                                     }
//                                     if (sub_stage_not_found) {
//                                         callback(new Error("Template Doesn't have Sub-Stage with ID: " + event.sub_stage_id));
//                                     }
//                                     if (step_not_found) {
//                                         callback(new Error("Template Doesn't have Step with ID: " + event.step_id));
//                                     }
//                                 }
//                             });
//                             if (!project_found) {
//                                 callback(new Error("User " + Users.Items[0].user_name + " cannot create query on project " + project.Items[0].project_name));
//                             }
//                         }
//                     });
//                 }
//                 else {
//                     callback(new Error("Query Can't be created for the current project"));
//                 }
//             }
//             else {
//                 callback(new Error("Project With ID: " + event.project_id + " Doesn't Exist"));
//             }
//         });
//     }
//     else {
//         callback(new Error("Empty Fields Occured cannot create Query"));
//     }
// }

// function createExternalQuery(event, context, callback) {
//     let checkEmptyFields = true;
//     for (const field in event) {
//         if (typeof (event[field]) == 'string') {
//             if (event[field].trim().length == 0) {
//                 checkEmptyFields = false;
//             }
//         }
//     }
//     if (checkEmptyFields) {
//         let checkIfProjectExists = {
//             TableName: "XcelAudit_Projects",
//             KeyConditionExpression: '#project_id = :project_id',
//             ExpressionAttributeNames: { '#project_id': "project_id" },
//             ExpressionAttributeValues: { ':project_id': event.project_id }
//         };
//         queryDynamo(checkIfProjectExists, callback, function (project) {
//             if (project.Count > 0) {
//                 let checkIfQueryRiserExist = {
//                     TableName: "XcelAudit_UserPortal_Users",
//                     KeyConditionExpression: '#user_id = :user_id',
//                     ExpressionAttributeNames: { '#user_id': "user_id" },
//                     FilterExpression: "user_system_status = :user_system_status",
//                     ExpressionAttributeValues: {
//                         ':user_id': event.riser_user_id,
//                         ':user_system_status': "ACTIVE"
//                     }
//                 };
//                 queryDynamo(checkIfQueryRiserExist, callback, function (Users) {
//                     if (Users.Count > 0) {
//                         let user_projects = Users.Items[0].projects;
//                         let project_found = false;
//                         user_projects.forEach(project_id => {
//                             if (project_id == event.project_id) {
//                                 project_found = true;
//                                 let getProject = {
//                                     TableName: "XcelAudit_Projects",
//                                     KeyConditionExpression: '#project_id = :project_id',
//                                     ExpressionAttributeNames: { '#project_id': "project_id" },
//                                     ExpressionAttributeValues: { ':project_id': project_id }
//                                 };
//                                 queryDynamo(getProject, callback, function (project) {
//                                     if (project.Count > 0) {
//                                         let project_stages = project.Items[0].selected_template.audit_library_stages;
//                                         let stage_not_found = true;
//                                         let sub_stage_not_found = true;
//                                         let step_not_found = true;
//                                         for (let key in project_stages) {
//                                             let singleStage = project.Items[0].selected_template.audit_library_stages[key];
//                                             if (singleStage.stage_id == event.stage_id) {
//                                                 stage_not_found = false;
//                                                 for (let element in singleStage.sub_stages) {
//                                                     let singleSubStage = singleStage.sub_stages[element];
//                                                     if (singleSubStage.sub_stage_id == event.sub_stage_id) {
//                                                         sub_stage_not_found = false;
//                                                         for (let parameter in singleSubStage.steps) {
//                                                             let singleStep = singleSubStage.steps[parameter];
//                                                             if (singleStep.step_id == event.step_id) {
//                                                                 step_not_found = false;
//                                                                 let checkIfQueryRiseToExist = {
//                                                                     TableName: "XcelAudit_UserPortal_Users",
//                                                                     KeyConditionExpression: '#user_id = :user_id',
//                                                                     ExpressionAttributeNames: { '#user_id': "user_id" },
//                                                                     FilterExpression: "user_system_status = :user_system_status",
//                                                                     ExpressionAttributeValues: {
//                                                                         ':user_id': event.rised_to_user_id,
//                                                                         ':user_system_status': "ACTIVE",
//                                                                     }
//                                                                 };
//                                                                 queryDynamo(checkIfQueryRiseToExist, callback, function (risedTo) {
//                                                                     if (risedTo.Count > 0) {
//                                                                         let risedTo_projects = risedTo.Items[0].projects;
//                                                                         let project_found = false;
//                                                                         risedTo_projects.forEach(project_id => {
//                                                                             if (project_id == event.project_id) {
//                                                                                 project_found = true;
//                                                                                 let getProjectDetailsParams = {

//                                                                                 }
//                                                                             }
//                                                                         });
//                                                                         if (project_found) {
//                                                                             let currentTime = new Date();
//                                                                             let currentOffset = currentTime.getTimezoneOffset();
//                                                                             let ISTOffset = 330;
//                                                                             //let created_at = new Date(currentTime.getTime() + (ISTOffset + currentOffset) * 60000);
//                                                                             let created_at = new Date(currentTime.getTime());
//                                                                             let timeStamp = created_at.getTime();
//                                                                             let message_thread = [];
//                                                                             let reply_message_thread = {
//                                                                                 created_on: timeStamp,
//                                                                                 created_by_user_id: event.riser_user_id,
//                                                                                 created_by_user_name: Users.Items[0].user_name,
//                                                                                 message: event.message
//                                                                             };
//                                                                             message_thread.push(reply_message_thread);
//                                                                             let newQueryParams = {
//                                                                                 Item: {
//                                                                                     "case_id": uuid.v4(),
//                                                                                     "case_owner": event.riser_user_id,
//                                                                                     "organisation_id": event.organisation_id,
//                                                                                     "client_id": project.Items[0].client_id,
//                                                                                     "client_name": project.Items[0].client_name,
//                                                                                     "project_id": event.project_id,
//                                                                                     "project_name": project.Items[0].project_name,
//                                                                                     "template_id": project.Items[0].selected_template.selected_template_id,
//                                                                                     "stage_id": event.stage_id,
//                                                                                     "stage_name": singleStage.stage_name,
//                                                                                     "sub_stage_id": event.sub_stage_id,
//                                                                                     "sub_stage_name": singleSubStage.sub_stage_name,
//                                                                                     "step_id": event.step_id,
//                                                                                     "step_name": singleStep.step_name,
//                                                                                     "riser_user_id": event.riser_user_id,
//                                                                                     "riser_user_name": Users.Items[0].user_name,
//                                                                                     "rised_to_user_id": event.rised_to_user_id,
//                                                                                     "rised_to_user_name": risedTo.Items[0].user_name,
//                                                                                     "query_type": "EXTERNAL",
//                                                                                     "amount": event.amount,
//                                                                                     "created_on": timeStamp,
//                                                                                     "subject": event.subject,
//                                                                                     "message_thread": message_thread,
//                                                                                     "latest_message": event.message,
//                                                                                     "query_status": 'PENDING'
//                                                                                 },
//                                                                                 TableName: "XcelAudit_Queries",
//                                                                                 ConditionExpression: "attribute_not_exists(case_id)",
//                                                                                 ReturnValues: "ALL_OLD"
//                                                                             };
//                                                                             insertIntoDynamo(newQueryParams, callback, function (InsertedData) {
//                                                                                 let updateUserQueriesCountParams = {
//                                                                                     TableName: "XcelAudit_UserPortal_Users",
//                                                                                     Key: {
//                                                                                         user_id: event.rised_to_user_id
//                                                                                     },
//                                                                                     UpdateExpression: "set no_of_pending_queries = :no_of_pending_queries",
//                                                                                     ExpressionAttributeValues: {
//                                                                                         ':no_of_pending_queries': risedTo.Items[0].no_of_pending_queries + 1
//                                                                                     },
//                                                                                     ReturnValues: "UPDATED_NEW"
//                                                                                 };
//                                                                                 updateDynamoRecord(updateUserQueriesCountParams, callback, function (data) {
//                                                                                     auditLog(Users.Items[0].user_name, "Created External Query ", event.organisation_id, function (data) {
//                                                                                         callback(null, { "status": "Success", "Status_Message": "External Query created Successfully!!" });
//                                                                                     });
//                                                                                 })
//                                                                             });
//                                                                         } else {
//                                                                             callback(new Error("Query Cannot be rised to " + risedTo.Items[0].user_name + " on project " + project.Items[0].project_name));
//                                                                         }
//                                                                     } else {
//                                                                         callback(new Error("Active Internal Query Rised to User with User ID: " + event.raiser_user_id + "doesn't Exist"));
//                                                                     }
//                                                                 });
//                                                             }
//                                                         }
//                                                     }
//                                                 }
//                                             }
//                                         }
//                                         if (stage_not_found) {
//                                             callback(new Error("Template Doesn't have Stage with ID: " + event.stage_id));
//                                         }
//                                         if (sub_stage_not_found) {
//                                             callback(new Error("Template Doesn't have Sub-Stage with ID: " + event.sub_stage_id));
//                                         }
//                                         if (step_not_found) {
//                                             callback(new Error("Template Doesn't have Step with ID: " + event.step_id));
//                                         }
//                                     } else {
//                                         callback(new Error("Project Details Not Found the project ID: " + event.project_id));
//                                     }
//                                 });
//                             }
//                         });
//                         if (!project_found) {
//                             callback(new Error("Query Cannot be rised by " + Users.Items[0].user_name + " on project " + project.Items[0].project_name));
//                         }
//                     } else {
//                         callback(new Error("Active Internal Query Riser with User ID: " + event.raiser_user_id + "doesn't Exist"));
//                     }
//                 });
//             } else {
//                 callback(new Error("Project With ID: " + event.project_id + " Doesn't Exist"));
//             }
//         });
//     } else {
//         callback(new Error("Empty Fields Occured cannot create Query"));
//     }
// }

// function AddTimeLog(event, context, callback) {
//     let checkEmptyFields = true;
//     for (const field in event) {
//         if (typeof(event[field]) == 'string') {
//             if (event[field].trim().length == 0) {
//                 checkEmptyFields = false;
//             }
//         }
//     }
//     if (checkEmptyFields) {
//         let getProject = {
//             TableName: "XcelAudit_Projects",
//             KeyConditionExpression: '#project_id = :project_id',
//             ExpressionAttributeNames: { '#project_id': "project_id" },
//             ExpressionAttributeValues: { ':project_id': event.project_id }
//         };
//         queryDynamo(getProject, callback, function(project) {
//             if (project.Count > 0) {
//                 if (project.Items[0].project_status != "ARCHIVED") {
//                     if (project.Items[0].client_id == event.client_id) {
//                         if (project.Items[0].organisation_id == event.organisation_id) {
//                             let project_members = project.Items[0].project_members;
//                             let user_found = false;
//                             project_members.forEach(member => {
//                                 if (member.user_id == event.user_id) {
//                                     user_found = true;
//                                 }
//                             });
//                             if (user_found) {
//                                 let currentTime = new Date();
//                                 //let created_at = new Date(currentTime.getTime() + (ISTOffset + currentOffset) * 60000);
//                                 let created_at = new Date(currentTime.getTime());
//                                 let timeStamp = created_at.getTime();
//                                 let project_stages = project.Items[0].selected_template.audit_library_stages;
//                                 for (let key in project_stages) {
//                                     let singleStage = project.Items[0].selected_template.audit_library_stages[key];
//                                     if (singleStage.stage_id == event.stage_id) {
//                                         for (let element in singleStage.sub_stages) {
//                                             let singleSubStage = singleStage.sub_stages[element];
//                                             if (singleSubStage.sub_stage_id == event.sub_stage_id) {
//                                                 let newTimeLogParams = {
//                                                     Item: {
//                                                         "time_sheet_id": uuid.v4(),
//                                                         "organisation_id": event.organisation_id,
//                                                         "client_id": event.client_id,
//                                                         "client_name": project.Items[0].client_name,
//                                                         "project_id": event.project_id,
//                                                         "project_name": project.Items[0].project_name,
//                                                         "template_id": project.Items[0].selected_template.selected_template_id,
//                                                         "stage_id": event.stage_id,
//                                                         "stage_name": singleStage.stage_name,
//                                                         "sub_stage_id": event.sub_stage_id,
//                                                         "sub_stage_name": singleSubStage.sub_stage_name,
//                                                         "user_id": event.user_id,
//                                                         "selected_date": event.selected_date,
//                                                         "number_of_hours": event.number_of_hours,
//                                                         "created_on": timeStamp,
//                                                         "status": 'PENDING'
//                                                     },
//                                                     TableName: "XcelAudit_Timesheets",
//                                                     ConditionExpression: "attribute_not_exists(time_sheet_id)",
//                                                     ReturnValues: "ALL_OLD"
//                                                 };
//                                                 insertIntoDynamo(newTimeLogParams, callback, function(InsertedData) {
//                                                     auditLog(event.creater_email_id, "Time Log Added SuccessFully  ", event.organisation_id, function(data) {
//                                                         callback(null, { "status": "Success", "Status_Message": "Log Added Successfully!!" });
//                                                     });
//                                                 });
//                                             }
//                                         }
//                                     }
//                                 }
//                             }
//                             else if (!user_found) {
//                                 callback(new Error("User With ID: " + event.user_id + " is not a part of project with ID: " + event.project_id));
//                             }
//                             else {
//                                 callback(new Error("Reviewer With ID: " + event.reviewer_id + " is not a part of project with ID: " + event.project_id));
//                             }
//                         }
//                         else {
//                             callback(new Error("Project doesnot belong to organisation with ID: " + event.organisation_id));
//                         }
//                     }
//                     else {
//                         callback(new Error("Project des not belong to client with ID: " + event.client_id));
//                     }
//                 }
//                 else {
//                     callback(new Error("Project is Already Archived"));
//                 }
//             }
//             else {
//                 callback(new Error("Project Not Found with ID: " + event.project_id));
//             }
//         });
//     }
//     else {
//         callback(new Error("Empty Fields Occured Cannot close Query!!"));
//     }
// }
